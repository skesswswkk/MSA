{"version":3,"file":"3270.6662d124aa77a8c47c87.js","mappings":"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","sources":["webpack://grafana/./public/app/features/explore/AddToDashboard/addToDashboard.ts","webpack://grafana/./public/app/features/explore/AddToDashboard/AddToDashboardModal.tsx","webpack://grafana/./public/app/features/explore/AddToDashboard/index.tsx"],"sourcesContent":["import { DataFrame, DataQuery, DataSourceRef } from '@grafana/data';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport {\n  getNewDashboardModelData,\n  setDashboardToFetchFromLocalStorage,\n} from 'app/features/dashboard/state/initDashboard';\nimport { DashboardDTO, ExplorePanelData } from 'app/types';\n\nexport enum AddToDashboardError {\n  FETCH_DASHBOARD = 'fetch-dashboard',\n  SET_DASHBOARD_LS = 'set-dashboard-ls-error',\n}\n\ninterface AddPanelToDashboardOptions {\n  queries: DataQuery[];\n  queryResponse: ExplorePanelData;\n  datasource?: DataSourceRef;\n  dashboardUid?: string;\n}\n\nfunction createDashboard(): DashboardDTO {\n  const dto = getNewDashboardModelData();\n\n  // getNewDashboardModelData adds by default the \"add-panel\" panel. We don't want that.\n  dto.dashboard.panels = [];\n\n  return dto;\n}\n\nexport async function setDashboardInLocalStorage(options: AddPanelToDashboardOptions) {\n  const panelType = getPanelType(options.queries, options.queryResponse);\n  const panel = {\n    targets: options.queries,\n    type: panelType,\n    title: 'New Panel',\n    gridPos: { x: 0, y: 0, w: 12, h: 8 },\n    datasource: options.datasource,\n  };\n\n  let dto: DashboardDTO;\n\n  if (options.dashboardUid) {\n    try {\n      dto = await backendSrv.getDashboardByUid(options.dashboardUid);\n    } catch (e) {\n      throw AddToDashboardError.FETCH_DASHBOARD;\n    }\n  } else {\n    dto = createDashboard();\n  }\n\n  dto.dashboard.panels = [panel, ...(dto.dashboard.panels ?? [])];\n\n  try {\n    setDashboardToFetchFromLocalStorage(dto);\n  } catch {\n    throw AddToDashboardError.SET_DASHBOARD_LS;\n  }\n}\n\nconst isVisible = (query: DataQuery) => !query.hide;\nconst hasRefId = (refId: DataFrame['refId']) => (frame: DataFrame) => frame.refId === refId;\n\nfunction getPanelType(queries: DataQuery[], queryResponse: ExplorePanelData) {\n  for (const { refId } of queries.filter(isVisible)) {\n    const hasQueryRefId = hasRefId(refId);\n    if (queryResponse.flameGraphFrames.some(hasQueryRefId)) {\n      return 'flamegraph';\n    }\n    if (queryResponse.graphFrames.some(hasQueryRefId)) {\n      return 'timeseries';\n    }\n    if (queryResponse.logsFrames.some(hasQueryRefId)) {\n      return 'logs';\n    }\n    if (queryResponse.nodeGraphFrames.some(hasQueryRefId)) {\n      return 'nodeGraph';\n    }\n    if (queryResponse.traceFrames.some(hasQueryRefId)) {\n      return 'traces';\n    }\n  }\n\n  // falling back to table\n  return 'table';\n}\n","import { partial } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { DeepMap, FieldError, useForm } from 'react-hook-form';\n\nimport { locationUtil, SelectableValue } from '@grafana/data';\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Field, InputControl, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { removeDashboardToFetchFromLocalStorage } from 'app/features/dashboard/state/initDashboard';\nimport { ExploreId, AccessControlAction, useSelector } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { setDashboardInLocalStorage, AddToDashboardError } from './addToDashboard';\n\nenum SaveTarget {\n  NewDashboard = 'new-dashboard',\n  ExistingDashboard = 'existing-dashboard',\n}\n\ninterface SaveTargetDTO {\n  saveTarget: SaveTarget;\n}\ninterface SaveToNewDashboardDTO extends SaveTargetDTO {\n  saveTarget: SaveTarget.NewDashboard;\n}\n\ninterface SaveToExistingDashboard extends SaveTargetDTO {\n  saveTarget: SaveTarget.ExistingDashboard;\n  dashboardUid: string;\n}\n\ntype FormDTO = SaveToNewDashboardDTO | SaveToExistingDashboard;\n\nfunction assertIsSaveToExistingDashboardError(\n  errors: DeepMap<FormDTO, FieldError>\n): asserts errors is DeepMap<SaveToExistingDashboard, FieldError> {\n  // the shape of the errors object is always compatible with the type above, but we need to\n  // explicitly assert its type so that TS can narrow down FormDTO to SaveToExistingDashboard\n  // when we use it in the form.\n}\n\nfunction getDashboardURL(dashboardUid?: string) {\n  return dashboardUid ? `d/${dashboardUid}` : 'dashboard/new';\n}\n\nenum GenericError {\n  UNKNOWN = 'unknown-error',\n  NAVIGATION = 'navigation-error',\n}\n\ninterface SubmissionError {\n  error: AddToDashboardError | GenericError;\n  message: string;\n}\n\ninterface Props {\n  onClose: () => void;\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboardModal = ({ onClose, exploreId }: Props) => {\n  const exploreItem = useSelector(getExploreItemSelector(exploreId))!;\n  const [submissionError, setSubmissionError] = useState<SubmissionError | undefined>();\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    watch,\n  } = useForm<FormDTO>({\n    defaultValues: { saveTarget: SaveTarget.NewDashboard },\n  });\n\n  const canCreateDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsCreate, contextSrv.isEditor);\n  const canWriteDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsWrite, contextSrv.isEditor);\n\n  const saveTargets: Array<SelectableValue<SaveTarget>> = [];\n  if (canCreateDashboard) {\n    saveTargets.push({\n      label: 'New dashboard',\n      value: SaveTarget.NewDashboard,\n    });\n  }\n  if (canWriteDashboard) {\n    saveTargets.push({\n      label: 'Existing dashboard',\n      value: SaveTarget.ExistingDashboard,\n    });\n  }\n\n  const saveTarget = saveTargets.length > 1 ? watch('saveTarget') : saveTargets[0].value;\n\n  const modalTitle = `Add panel to ${saveTargets.length > 1 ? 'dashboard' : saveTargets[0].label!.toLowerCase()}`;\n\n  const onSubmit = async (openInNewTab: boolean, data: FormDTO) => {\n    setSubmissionError(undefined);\n    const dashboardUid = data.saveTarget === SaveTarget.ExistingDashboard ? data.dashboardUid : undefined;\n\n    reportInteraction('e_2_d_submit', {\n      newTab: openInNewTab,\n      saveTarget: data.saveTarget,\n      queries: exploreItem.queries.length,\n    });\n\n    try {\n      await setDashboardInLocalStorage({\n        dashboardUid,\n        datasource: exploreItem.datasourceInstance?.getRef(),\n        queries: exploreItem.queries,\n        queryResponse: exploreItem.queryResponse,\n      });\n    } catch (error) {\n      switch (error) {\n        case AddToDashboardError.FETCH_DASHBOARD:\n          setSubmissionError({ error, message: 'Could not fetch dashboard information. Please try again.' });\n          break;\n        case AddToDashboardError.SET_DASHBOARD_LS:\n          setSubmissionError({ error, message: 'Could not add panel to dashboard. Please try again.' });\n          break;\n        default:\n          setSubmissionError({ error: GenericError.UNKNOWN, message: 'Something went wrong. Please try again.' });\n      }\n      return;\n    }\n\n    const dashboardURL = getDashboardURL(dashboardUid);\n    if (!openInNewTab) {\n      onClose();\n      locationService.push(locationUtil.stripBaseFromUrl(dashboardURL));\n      return;\n    }\n\n    const didTabOpen = !!global.open(config.appUrl + dashboardURL, '_blank');\n    if (!didTabOpen) {\n      setSubmissionError({\n        error: GenericError.NAVIGATION,\n        message: 'Could not navigate to the selected dashboard. Please try again.',\n      });\n      removeDashboardToFetchFromLocalStorage();\n      return;\n    }\n    onClose();\n  };\n\n  useEffect(() => {\n    reportInteraction('e_2_d_open');\n  }, []);\n\n  return (\n    <Modal title={modalTitle} onDismiss={onClose} isOpen>\n      <form>\n        {saveTargets.length > 1 && (\n          <InputControl\n            control={control}\n            render={({ field: { ref, ...field } }) => (\n              <Field label=\"Target dashboard\" description=\"Choose where to add the panel.\">\n                <RadioButtonGroup options={saveTargets} {...field} id=\"e2d-save-target\" />\n              </Field>\n            )}\n            name=\"saveTarget\"\n          />\n        )}\n\n        {saveTarget === SaveTarget.ExistingDashboard &&\n          (() => {\n            assertIsSaveToExistingDashboardError(errors);\n            return (\n              <InputControl\n                render={({ field: { ref, value, onChange, ...field } }) => (\n                  <Field\n                    label=\"Dashboard\"\n                    description=\"Select in which dashboard the panel will be created.\"\n                    error={errors.dashboardUid?.message}\n                    invalid={!!errors.dashboardUid}\n                  >\n                    <DashboardPicker\n                      {...field}\n                      inputId=\"e2d-dashboard-picker\"\n                      defaultOptions\n                      onChange={(d) => onChange(d?.uid)}\n                    />\n                  </Field>\n                )}\n                control={control}\n                name=\"dashboardUid\"\n                shouldUnregister\n                rules={{ required: { value: true, message: 'This field is required.' } }}\n              />\n            );\n          })()}\n\n        {submissionError && (\n          <Alert severity=\"error\" title=\"Error adding the panel\">\n            {submissionError.message}\n          </Alert>\n        )}\n\n        <Modal.ButtonRow>\n          <Button type=\"reset\" onClick={onClose} fill=\"outline\" variant=\"secondary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"secondary\"\n            onClick={handleSubmit(partial(onSubmit, true))}\n            icon=\"external-link-alt\"\n          >\n            Open in new tab\n          </Button>\n          <Button type=\"submit\" variant=\"primary\" onClick={handleSubmit(partial(onSubmit, false))} icon=\"apps\">\n            Open dashboard\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { ToolbarButton } from '@grafana/ui';\nimport { ExploreId, useSelector } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { AddToDashboardModal } from './AddToDashboardModal';\n\ninterface Props {\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboard = ({ exploreId }: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const selectExploreItem = getExploreItemSelector(exploreId);\n  const explorePaneHasQueries = !!useSelector(selectExploreItem)?.queries?.length;\n\n  return (\n    <>\n      <ToolbarButton\n        icon=\"apps\"\n        onClick={() => setIsOpen(true)}\n        aria-label=\"Add to dashboard\"\n        disabled={!explorePaneHasQueries}\n      >\n        Add to dashboard\n      </ToolbarButton>\n\n      {isOpen && <AddToDashboardModal onClose={() => setIsOpen(false)} exploreId={exploreId} />}\n    </>\n  );\n};\n"],"names":["AddToDashboardError","async","setDashboardInLocalStorage","options","panelType","queries","queryResponse","refId","filter","isVisible","hasQueryRefId","hasRefId","flameGraphFrames","some","graphFrames","logsFrames","nodeGraphFrames","traceFrames","getPanelType","panel","targets","type","title","gridPos","x","y","w","h","datasource","dto","dashboardUid","backendSrv","e","FETCH_DASHBOARD","getNewDashboardModelData","dashboard","panels","createDashboard","setDashboardToFetchFromLocalStorage","SET_DASHBOARD_LS","query","hide","frame","SaveTarget","GenericError","AddToDashboardModal","onClose","exploreId","exploreItem","useSelector","getExploreItemSelector","submissionError","setSubmissionError","useState","handleSubmit","control","formState","errors","watch","useForm","defaultValues","saveTarget","NewDashboard","canCreateDashboard","contextSrv","AccessControlAction","canWriteDashboard","saveTargets","push","label","value","ExistingDashboard","length","modalTitle","toLowerCase","onSubmit","openInNewTab","data","undefined","reportInteraction","newTab","datasourceInstance","getRef","error","message","UNKNOWN","dashboardURL","getDashboardURL","locationService","locationUtil","global","open","config","NAVIGATION","removeDashboardToFetchFromLocalStorage","useEffect","Modal","onDismiss","isOpen","InputControl","render","field","Field","description","RadioButtonGroup","id","name","onChange","invalid","DashboardPicker","inputId","defaultOptions","d","uid","shouldUnregister","rules","required","Alert","severity","Button","onClick","fill","variant","partial","icon","AddToDashboard","setIsOpen","selectExploreItem","explorePaneHasQueries","ToolbarButton","disabled"],"sourceRoot":""}