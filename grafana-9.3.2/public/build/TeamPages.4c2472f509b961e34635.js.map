{"version":3,"file":"TeamPages.4c2472f509b961e34635.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/RolePicker/hooks.ts","webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/teams/TeamGroupSync.tsx","webpack://grafana/./public/app/core/components/WithFeatureToggle.tsx","webpack://grafana/./public/app/features/teams/TeamMemberRow.tsx","webpack://grafana/./public/app/features/teams/TeamMembers.tsx","webpack://grafana/./public/app/features/teams/TeamPermissions.tsx","webpack://grafana/./public/app/features/teams/TeamSettings.tsx","webpack://grafana/./public/app/features/teams/TeamPages.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n}\n\nexport const TeamRolePicker: FC<Props> = ({\n  teamId,\n  roleOptions,\n  disabled,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n}) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [teamId, getTeamRoles, pendingRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n    />\n  );\n};\n","import { useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { fetchRoleOptions } from './api';\n\nexport const useRoleOptions = (organizationId: number) => {\n  const [orgId, setOrgId] = useState(organizationId);\n\n  const { value = [] } = useAsync(async () => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return fetchRoleOptions(orgId);\n    }\n    return Promise.resolve([]);\n  }, [orgId]);\n\n  return [{ roleOptions: value }, setOrgId] as const;\n};\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { LOCALES } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { UserPreferencesDTO } from 'app/types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n  onConfirm?: () => Promise<boolean>;\n}\n\nexport type State = UserPreferencesDTO;\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t('shared-preferences.theme.default-label', 'Default') },\n  { value: 'dark', label: t('shared-preferences.theme.dark-label', 'Dark') },\n  { value: 'light', label: t('shared-preferences.theme.light-label', 'Light') },\n];\n\nfunction getLanguageOptions(): Array<SelectableValue<string>> {\n  const languageOptions = LOCALES.map((v) => ({\n    value: v.code,\n    label: v.name,\n  }));\n\n  const options = [\n    {\n      value: '',\n      label: t('common.locale.default', 'Default'),\n    },\n    ...languageOptions,\n  ];\n\n  return options;\n}\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      locale: '',\n      queryHistory: { homeTab: '' },\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      locale: prefs.locale,\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const confirmationResult = this.props.onConfirm ? await this.props.onConfirm() : true;\n\n    if (confirmationResult) {\n      const { homeDashboardUID, theme, timezone, weekStart, locale, queryHistory } = this.state;\n      await this.service.update({ homeDashboardUID, theme, timezone, weekStart, locale, queryHistory });\n      window.location.reload();\n    }\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLocaleChanged = (locale: string) => {\n    this.setState({ locale });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, locale } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n    const languages = getLanguageOptions();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans i18nKey=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t('shared-preferences.fields.theme-label', 'UI Theme')}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans i18nKey=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <DashboardPicker\n                  value={homeDashboardUID}\n                  onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n                  defaultOptions={true}\n                  isClearable={true}\n                  placeholder={t('shared-preferences.fields.home-dashboard-placeholder', 'Default dashboard')}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-dashboard.fields.timezone-label', 'Timezone')}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t('shared-preferences.fields.week-start-label', 'Week start')}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans i18nKey=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.beta} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === locale)}\n                    onChange={(locale: SelectableValue<string>) => this.onLocaleChanged(locale.value ?? '')}\n                    options={languages}\n                    placeholder={t('shared-preferences.fields.locale-placeholder', 'Choose language')}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans i18nKey=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Tooltip, Icon, Button, useTheme2, InlineField, InlineFieldRow } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nimport { StoreState, TeamGroup } from '../../types';\n\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP, OAuth or SAML groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    const { isReadOnly } = this.props;\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            onClick={() => this.onRemoveGroup(group)}\n            disabled={isReadOnly}\n            aria-label={`Remove group ${group.groupId}`}\n          >\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const { groups, isReadOnly } = this.props;\n    return (\n      <div>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'team-sync'}\n            eventVariant={'trial'}\n            featureName={'team sync'}\n            text={'Add a group to enable team sync for free during your trial of Grafana Pro.'}\n          />\n        )}\n        <div className=\"page-action-bar\">\n          {(!highlightTrial() || groups.length > 0) && (\n            <>\n              <h3 className=\"page-sub-heading\">External group sync</h3>\n              <Tooltip placement=\"auto\" content={headerTooltip}>\n                <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n              </Tooltip>\n            </>\n          )}\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isReadOnly}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <form onSubmit={this.onAddGroup}>\n              <InlineFieldRow>\n                <InlineField\n                  label={'Add External Group'}\n                  tooltip=\"LDAP Group Example: cn=users,ou=groups,dc=grafana,dc=org.\"\n                >\n                  <Input\n                    type=\"text\"\n                    id={'add-external-group'}\n                    placeholder=\"\"\n                    value={newGroupId}\n                    onChange={this.onNewGroupIdChanged}\n                    disabled={isReadOnly}\n                  />\n                </InlineField>\n                <Button type=\"submit\" disabled={isReadOnly || !this.isNewGroupValid()} style={{ marginLeft: 4 }}>\n                  Add group\n                </Button>\n              </InlineFieldRow>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 &&\n          !isAdding &&\n          (highlightTrial() ? (\n            <TeamSyncUpgradeContent action={{ onClick: this.onToggleAdding, text: 'Add group' }} />\n          ) : (\n            <EmptyListCTA\n              onClick={this.onToggleAdding}\n              buttonIcon=\"users-alt\"\n              title=\"There are no external groups to sync with\"\n              buttonTitle=\"Add group\"\n              proTip={headerTooltip}\n              proTipLinkTitle=\"Learn more\"\n              proTipLink=\"https://docs.grafana.org/auth/enhanced_ldap/\"\n              proTipTarget=\"_blank\"\n              buttonDisabled={isReadOnly}\n            />\n          ))}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const TeamSyncUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  const theme = useTheme2();\n  return (\n    <UpgradeContent\n      action={action}\n      listItems={[\n        'Stop managing user access in two places - assign users to groups in SAML, LDAP or Oauth, and manage access at a Team level in Grafana',\n        'Update users’ permissions immediately when you add or remove them from an LDAP group, with no need for them to sign out and back in',\n      ]}\n      image={`team-sync-${theme.isLight ? 'light' : 'dark'}.png`}\n      featureName={'team sync'}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/team-sync'}\n      description={\n        'Team Sync makes it easier for you to manage users’ access in Grafana, by immediately updating each user’s Grafana teams and permissions based on their single sign-on group membership, instead of when users sign in.'\n      }\n    />\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle = ({ featureToggle, children }: React.PropsWithChildren<Props>) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, DeleteButton } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\n\nimport { updateTeamMember, removeTeamMember } from './state/actions';\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find((dp) => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          {signedInUserIsTeamAdmin ? (\n            <Select\n              isSearchable={false}\n              options={teamsPermissionLevels}\n              onChange={(item) => this.onPermissionChange(item, member)}\n              value={value}\n              width={32}\n              aria-label={`Select member's ${member.name} permission level`}\n            />\n          ) : (\n            <span>{value.label}</span>\n          )}\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img\n            alt={`Avatar for team member \"${member.name}\"`}\n            className=\"filter-table__avatar\"\n            src={member.avatarUrl}\n          />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label={`Remove team member ${member.name}`}\n            size=\"sm\"\n            disabled={!signedInUserIsTeamAdmin}\n            onConfirm={() => this.onRemoveMember(member)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, FilterInput, Label } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { TeamMember, OrgUser } from 'app/types';\n\nimport TeamMemberRow from './TeamMemberRow';\nimport { addTeamMember } from './state/actions';\nimport { setSearchMemberQuery } from './state/reducers';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  members: TeamMember[];\n  syncEnabled: boolean;\n}\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: SelectableValue<OrgUser['userId']> | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: SelectableValue<OrgUser['userId']>) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search members\" value={searchMemberQuery} onChange={this.onSearchQueryChange} />\n          </div>\n          <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isAdding || !isTeamAdmin}>\n            Add member\n          </Button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton aria-label=\"Close 'Add team member' dialogue\" onClick={this.onToggleAdding} />\n            <Label htmlFor=\"user-picker\">Add team member</Label>\n            <div className=\"gf-form-inline\">\n              <UserPicker inputId=\"user-picker\" onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <Button type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </Button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map((member) => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connector(TeamMembers);\n","import React from 'react';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AccessControlAction, Team } from '../../types';\n\ntype TeamPermissionsProps = {\n  team: Team;\n};\n\n// TeamPermissions component replaces TeamMembers component when the accesscontrol feature flag is set\nconst TeamPermissions = (props: TeamPermissionsProps) => {\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ActionTeamsPermissionsWrite,\n    props.team\n  );\n\n  return (\n    <Permissions\n      title=\"\"\n      addPermissionTitle=\"Add member\"\n      buttonLabel=\"Add member\"\n      emptyLabel=\"There are no members in this team or you do not have the permissions to list the current members.\"\n      resource=\"teams\"\n      resourceId={props.team.id}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n\nexport default TeamPermissions;\n","import React, { FC, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { updateTeamRoles } from 'app/core/components/RolePicker/api';\nimport { useRoleOptions } from 'app/core/components/RolePicker/hooks';\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, Team } from 'app/types';\n\nimport { updateTeam } from './state/actions';\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  team: Team;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  const canWriteTeamSettings = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsWrite, team);\n  const currentOrgId = contextSrv.user.orgId;\n\n  const [{ roleOptions }] = useRoleOptions(currentOrgId);\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <VerticalGroup spacing=\"lg\">\n      <Form\n        defaultValues={{ ...team }}\n        onSubmit={async (formTeam: Team) => {\n          if (contextSrv.licensedAccessControlEnabled() && canUpdateRoles) {\n            await updateTeamRoles(pendingRoles, team.id);\n          }\n          updateTeam(formTeam.name, formTeam.email);\n        }}\n        disabled={!canWriteTeamSettings}\n      >\n        {({ register, errors }) => (\n          <FieldSet label=\"Team details\">\n            <Field\n              label=\"Name\"\n              disabled={!canWriteTeamSettings}\n              required\n              invalid={!!errors.name}\n              error=\"Name is required\"\n            >\n              <Input {...register('name', { required: true })} id=\"name-input\" />\n            </Field>\n\n            {contextSrv.licensedAccessControlEnabled() && (\n              <Field label=\"Role\">\n                <TeamRolePicker\n                  teamId={team.id}\n                  roleOptions={roleOptions}\n                  disabled={false}\n                  apply={true}\n                  onApplyRoles={setPendingRoles}\n                  pendingRoles={pendingRoles}\n                  maxWidth=\"100%\"\n                />\n              </Field>\n            )}\n\n            <Field\n              label=\"Email\"\n              description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n              disabled={!canWriteTeamSettings}\n            >\n              <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" id=\"email-input\" />\n            </Field>\n            <Button type=\"submit\" disabled={!canWriteTeamSettings}>\n              Update\n            </Button>\n          </FieldSet>\n        )}\n      </Form>\n      <SharedPreferences resourceUri={`teams/${team.id}`} disabled={!canWriteTeamSettings} />\n    </VerticalGroup>\n  );\n};\n\nexport default connector(TeamSettings);\n","import { includes } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModelItem } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport config from 'app/core/config';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport TeamGroupSync, { TeamSyncUpgradeContent } from './TeamGroupSync';\nimport TeamMembers from './TeamMembers';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams>, Themeable2 {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const team = getTeam(state.team, teamId);\n  let defaultPage = 'members';\n  if (contextSrv.accessControlEnabled()) {\n    // With RBAC the settings page will always be available\n    if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      defaultPage = 'settings';\n    }\n  }\n  const pageName = props.match.params.page ?? defaultPage;\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const pageNav = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav).main;\n  const members = getTeamMembers(state.team);\n\n  return {\n    pageNav,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: featureEnabled('teamsync'),\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    // With accesscontrol, the TeamPermissions will fetch team members\n    if (!contextSrv.accessControlEnabled()) {\n      await this.props.loadTeamMembers();\n    }\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (pageNav: NavModelItem, isSignedInUserTeamAdmin: boolean) => {\n    if (contextSrv.accessControlEnabled()) {\n      return pageNav;\n    }\n\n    if (!isSignedInUserTeamAdmin && pageNav && pageNav.children) {\n      pageNav.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return pageNav;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    const canReadTeam = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canReadTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canWriteTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsWrite,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (contextSrv.accessControlEnabled()) {\n          return <TeamPermissions team={team!} />;\n        } else {\n          return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n        }\n      case PageTypes.Settings:\n        return canReadTeam && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        if (isSyncEnabled) {\n          if (canReadTeamPermissions) {\n            return <TeamGroupSync isReadOnly={!canWriteTeamPermissions} />;\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return (\n            <>\n              <UpgradeBox featureName={'team sync'} featureId={'team-sync'} />\n              <TeamSyncUpgradeContent />\n            </>\n          );\n        }\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, pageNav, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navId=\"teams\" pageNav={this.hideTabsFromNonTeamAdmin(pageNav, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(withTheme2(TeamPages));\n","import { getBackendSrv } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded([]));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ perpage: 1000, page: 1 })\n    );\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { User } from 'app/core/services/context_srv';\nimport { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\nexport const getTeamsSearchPage = (state: TeamsState) => state.searchPage;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","onApplyRoles","pendingRoles","apply","maxWidth","loading","value","appliedRoles","getTeamRoles","useAsyncFn","async","Boolean","length","contextSrv","AccessControlAction","fetchTeamRoles","e","console","error","useEffect","canUpdateRoles","onRolesChange","roles","updateTeamRoles","isLoading","basicRoleDisabled","useRoleOptions","organizationId","orgId","setOrgId","useState","useAsync","fetchRoleOptions","Promise","resolve","themes","label","t","i18nFlag","config","SharedPreferences","PureComponent","constructor","props","super","this","onConfirm","homeDashboardUID","theme","timezone","weekStart","locale","queryHistory","state","service","update","window","location","reload","setState","dashboardUID","PreferencesService","resourceUri","homeTab","prefs","load","render","styles","getStyles","languages","languageOptions","LOCALES","v","code","name","getLanguageOptions","onSubmit","onSubmitForm","i18nKey","options","find","item","onChange","onThemeChanged","htmlFor","className","labelText","onHomeDashboardChanged","uid","defaultOptions","isClearable","placeholder","inputId","selectors","includeInternal","onTimeZoneChanged","onWeekStartChanged","featureState","FeatureState","lang","onLocaleChanged","type","variant","stylesFactory","css","mapStateToProps","groups","getTeamGroups","team","mapDispatchToProps","loadTeamGroups","addTeamGroup","removeTeamGroup","headerTooltip","connect","TeamGroupSync","isAdding","event","newGroupId","target","preventDefault","group","groupId","componentDidMount","fetchTeamGroups","isNewGroupValid","renderGroup","isReadOnly","style","width","Button","size","onClick","onRemoveGroup","Icon","highlightTrial","UpgradeBox","featureId","eventVariant","featureName","text","Tooltip","placement","content","onToggleAdding","SlideDown","in","CloseButton","onAddGroup","InlineFieldRow","InlineField","tooltip","Input","I","id","onNewGroupIdChanged","marginLeft","TeamSyncUpgradeContent","action","EmptyListCTA","buttonIcon","title","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","buttonDisabled","map","useTheme2","listItems","image","isLight","featureUrl","description","WithFeatureToggle","featureToggle","children","removeTeamMember","updateTeamMember","connector","TeamMemberRow","member","permission","updatedTeamMember","renderLabels","bind","renderPermissions","onRemoveMember","userId","editorsCanAdmin","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","Select","isSearchable","onPermissionChange","labels","TagBadge","removeIcon","count","syncEnabled","alt","src","avatarUrl","login","email","DeleteButton","addTeamMember","setSearchMemberQuery","searchMemberQuery","getSearchMemberQuery","signedInUser","TeamMembers","user","newTeamMember","members","isTeamAdmin","isSignedInUserTeamAdmin","FilterInput","onSearchQueryChange","Label","UserPicker","onSelected","onUserSelected","onAddUserToTeam","canSetPermissions","P","addPermissionTitle","buttonLabel","emptyLabel","resource","resourceId","updateTeam","canWriteTeamSettings","currentOrgId","setPendingRoles","spacing","Form","defaultValues","formTeam","register","errors","FieldSet","Field","required","invalid","PageTypes","loadTeam","loadTeamMembers","parseInt","match","params","getTeam","defaultPage","pageName","page","teamLoadingNav","getTeamLoadingNav","pageNav","getNavModel","navIndex","main","getTeamMembers","TeamPages","text1","text2","toLocaleLowerCase","filter","navItem","textsAreEqual","Members","hideFromTabs","isSyncEnabled","featureEnabled","fetchTeam","getCurrentPage","pages","currentPage","includes","renderPage","canReadTeam","canReadTeamPermissions","canWriteTeamPermissions","Settings","GroupSync","Page","navId","hideTabsFromNonTeamAdmin","Object","keys","withTheme2","loadTeams","dispatch","teamsLoaded","response","getBackendSrv","get","accessControlQueryParam","perpage","teams","teamLoaded","updateNavIndex","buildNavModel","getStore","teamMembersLoaded","post","delete","put","teamGroupsLoaded","encodeURIComponent","deleteTeam","loadingTeam","memberCount","TeamPermissionLevel","navModel","img","subTitle","url","breadcrumbs","active","icon","unshift","teamGroupSync","isLoadingTeam","tabSuffix","ProBadge","experimentId","push","node","child","indexOf","getSearchQuery","searchQuery","getTeamsCount","getTeamsSearchPage","searchPage","currentTeamId","getTeams","regex","RegExp","test","userInMembers","m","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","OrgRole","userIsTeamAdmin"],"sourceRoot":""}