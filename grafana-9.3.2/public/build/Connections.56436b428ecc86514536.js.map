{"version":3,"file":"Connections.56436b428ecc86514536.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CardGrid/CardGrid.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CategoryHeader/CategoryHeader.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/NoResults/NoResults.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/Search/Search.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/ConnectData.tsx","webpack://grafana/./public/app/features/connections/pages/ConnectDataPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourceDetailsPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourcesListPage.tsx","webpack://grafana/./public/app/features/connections/pages/EditDataSourcePage.tsx","webpack://grafana/./public/app/features/connections/pages/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/connections/Connections.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesListHeader.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesList.tsx","webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCard.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCardList.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceCategories.tsx","webpack://grafana/./public/app/features/datasources/components/NewDataSource.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const { searchQuery, linkButton, setSearchQuery, target, placeholder = 'Search by name or type' } = this.props;\n    const linkProps: typeof LinkButton.defaultProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Card, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sourcesList: css`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 12px;\n    list-style: none;\n    margin-bottom: 80px;\n  `,\n  card: css`\n    height: 90px;\n    padding: 0px 24px;\n    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.6);\n  `,\n  cardContent: css`\n    display: flex;\n    align-items: center;\n  `,\n  logoWrapper: css`\n    display: flex;\n    justify-content: center;\n    margin-right: 8px;\n    width: 32px;\n    height: 32px;\n    img {\n      max-width: 100%;\n      max-height: 100%;\n      align-self: center;\n    }\n  `,\n  label: css`\n    color: ${theme.colors.text.primary};\n    margin-bottom: 0;\n  `,\n});\n\nexport interface CardGridProps {\n  items: Array<{ id: string; name: string; url: string; logo?: string }>;\n}\n\nexport const CardGrid: FC<CardGridProps> = ({ items }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <ul className={styles.sourcesList}>\n      {items.map((item) => (\n        <Card key={item.id} className={styles.card} href={item.url}>\n          <Card.Heading>\n            <div className={styles.cardContent}>\n              {item.logo && (\n                <div className={styles.logoWrapper}>\n                  <img src={item.logo} alt={`logo of ${item.name}`} />\n                </div>\n              )}\n              <h4 className={styles.label}>{item.name}</h4>\n            </div>\n          </Card.Heading>\n        </Card>\n      ))}\n    </ul>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, IconName } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  categoryHeader: css`\n    align-items: center;\n    display: flex;\n    margin-bottom: 24px;\n  `,\n  categoryLabel: css`\n    margin-bottom: 0px;\n    margin-left: 8px;\n  `,\n});\n\nexport const CategoryHeader: React.FC<{ iconName: IconName; label: string }> = ({ iconName, label }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.categoryHeader}>\n      <Icon name={iconName} size=\"xl\" />\n      <h3 className={styles.categoryLabel}>{label}</h3>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = () => ({\n  noResults: css`\n    text-align: center;\n    padding: 50px 0;\n    font-style: italic;\n  `,\n});\n\nexport const NoResults: FC = () => {\n  const styles = useStyles2(getStyles);\n\n  return <p className={styles.noResults}>No results matching your query were found.</p>;\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { Icon, Input, useStyles2 } from '@grafana/ui';\n\nconst getStyles = () => ({\n  searchContainer: css`\n    display: flex;\n    margin: 16px 0;\n    justify-content: space-between;\n  `,\n});\n\nexport const Search: FC<{ onChange: (e: React.FormEvent<HTMLInputElement>) => void }> = ({ onChange }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.searchContainer}>\n      <Input onChange={onChange} prefix={<Icon name=\"search\" />} placeholder=\"Search all\" aria-label=\"Search all\" />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { useStyles2, LoadingPlaceholder } from '@grafana/ui';\nimport { useGetAllWithFilters } from 'app/features/plugins/admin/state/hooks';\n\nimport { ROUTES } from '../../constants';\n\nimport { CardGrid } from './CardGrid';\nimport { CategoryHeader } from './CategoryHeader';\nimport { NoResults } from './NoResults';\nimport { Search } from './Search';\n\nconst getStyles = () => ({\n  spacer: css`\n    height: 16px;\n  `,\n});\n\nexport function ConnectData() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const styles = useStyles2(getStyles);\n\n  const handleSearchChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setSearchTerm(e.currentTarget.value.toLowerCase());\n  };\n\n  const { isLoading, error, plugins } = useGetAllWithFilters({ query: searchTerm, filterBy: '' });\n\n  const cardGridItems = useMemo(\n    () =>\n      plugins.map((plugin) => ({\n        id: plugin.id,\n        name: plugin.name,\n        logo: plugin.info.logos.small,\n        url: ROUTES.DataSourcesDetails.replace(':id', plugin.id),\n      })),\n    [plugins]\n  );\n  const showNoResults = useMemo(() => !isLoading && !error && plugins.length < 1, [isLoading, error, plugins]);\n\n  return (\n    <>\n      <Search onChange={handleSearchChange} />\n      {/* We need this extra spacing when there are no filters */}\n      <div className={styles.spacer} />\n      <CategoryHeader iconName=\"database\" label=\"Data sources\" />\n      {isLoading ? (\n        <LoadingPlaceholder text=\"Loading...\" />\n      ) : !!error ? (\n        <p>Error: {error.message}</p>\n      ) : (\n        <CardGrid items={cardGridItems} />\n      )}\n      {showNoResults && <NoResults />}\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { ConnectData } from '../tabs/ConnectData';\n\nexport function ConnectDataPage() {\n  return (\n    <Page navId={'connections-connect-data'}>\n      <Page.Contents>\n        <ConnectData />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState, useSelector } from 'app/types';\n\nexport function DataSourceDetailsPage() {\n  const overrideNavId = 'standalone-plugin-page-/connections/connect-data';\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isConnectDataPageOverriden = Boolean(navIndex[overrideNavId]);\n  const navId = isConnectDataPageOverriden ? overrideNavId : 'connections-connect-data'; // The nav id changes (gets a prefix) if it is overriden by a plugin\n\n  return (\n    <Page\n      navId={navId}\n      pageNav={{\n        text: 'Datasource details',\n        subTitle: 'This is going to be the details page for a datasource',\n        active: true,\n      }}\n    >\n      <Page.Contents>Data Source Details (no exposed component from plugins yet)</Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourcesList } from 'app/features/datasources/components/DataSourcesList';\n\nexport function DataSourcesListPage() {\n  return (\n    <Page navId={'connections-your-connections-datasources'}>\n      <Page.Contents>\n        <DataSourcesList />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { EditDataSource } from 'app/features/datasources/components/EditDataSource';\nimport { useDataSource } from 'app/features/datasources/state/hooks';\nimport { useGetSingle } from 'app/features/plugins/admin/state/hooks';\n\nexport function EditDataSourcePage() {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const datasource = useDataSource(uid);\n  const datasourcePlugin = useGetSingle(datasource.type);\n  const params = new URLSearchParams(location.search);\n  const pageId = params.get('page');\n\n  return (\n    <Page\n      navId={'connections-your-connections-datasources'}\n      pageNav={{ text: datasource.name, subTitle: `Type: ${datasourcePlugin?.name}`, active: true }}\n    >\n      <Page.Contents>\n        <EditDataSource uid={uid} pageId={pageId} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { NewDataSource } from 'app/features/datasources/components/NewDataSource';\n\nexport function NewDataSourcePage() {\n  return (\n    <Page\n      navId={'connections-your-connections-datasources'}\n      pageNav={{ text: 'Add data source', subTitle: 'Choose a data source type', active: true }}\n    >\n      <Page.Contents>\n        <NewDataSource />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { DataSourcesRoutesContext } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nimport { ROUTES } from './constants';\nimport {\n  ConnectDataPage,\n  DataSourceDetailsPage,\n  DataSourcesListPage,\n  EditDataSourcePage,\n  NewDataSourcePage,\n} from './pages';\n\nexport default function Connections() {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isConnectDataPageOverriden = Boolean(navIndex['standalone-plugin-page-/connections/connect-data']);\n\n  return (\n    <DataSourcesRoutesContext.Provider\n      value={{\n        New: ROUTES.DataSourcesNew,\n        List: ROUTES.DataSources,\n        Edit: ROUTES.DataSourcesEdit,\n        Dashboards: ROUTES.DataSourcesDashboards,\n      }}\n    >\n      <Switch>\n        <Route exact path={ROUTES.Base} component={DataSourcesListPage} />\n        <Route exact path={ROUTES.YourConnections} component={DataSourcesListPage} />\n        <Route exact path={ROUTES.DataSources} component={DataSourcesListPage} />\n        <Route exact path={ROUTES.DataSourcesDetails} component={DataSourceDetailsPage} />\n        <Route exact path={ROUTES.DataSourcesNew} component={NewDataSourcePage} />\n        <Route exact path={ROUTES.DataSourcesEdit} component={EditDataSourcePage} />\n        {!isConnectDataPageOverriden && <Route path={ROUTES.ConnectData} component={ConnectDataPage} />}\n\n        {/* Default page */}\n        <Route component={DataSourcesListPage} />\n      </Switch>\n    </DataSourcesRoutesContext.Provider>\n  );\n}\n","import React, { useCallback } from 'react';\nimport { AnyAction } from 'redux';\n\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState, useSelector, useDispatch } from 'app/types';\n\nimport { getDataSourcesSearchQuery, setDataSourcesSearchQuery, useDataSourcesRoutes } from '../state';\n\nexport function DataSourcesListHeader() {\n  const dispatch = useDispatch();\n  const setSearchQuery = useCallback((q: string) => dispatch(setDataSourcesSearchQuery(q)), [dispatch]);\n  const searchQuery = useSelector(({ dataSources }: StoreState) => getDataSourcesSearchQuery(dataSources));\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  return (\n    <DataSourcesListHeaderView\n      searchQuery={searchQuery}\n      setSearchQuery={setSearchQuery}\n      canCreateDataSource={canCreateDataSource}\n    />\n  );\n}\n\nexport type ViewProps = {\n  searchQuery: string;\n  setSearchQuery: (q: string) => AnyAction;\n  canCreateDataSource: boolean;\n};\n\nexport function DataSourcesListHeaderView({ searchQuery, setSearchQuery, canCreateDataSource }: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const linkButton = {\n    href: dataSourcesRoutes.New,\n    title: 'Add data source',\n    disabled: !canCreateDataSource,\n  };\n\n  return (\n    <PageActionBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} linkButton={linkButton} key=\"action-bar\" />\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { Card, Tag, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, AccessControlAction, useSelector } from 'app/types';\n\nimport { getDataSources, getDataSourcesCount, useDataSourcesRoutes, useLoadDataSources } from '../state';\n\nimport { DataSourcesListHeader } from './DataSourcesListHeader';\n\nexport function DataSourcesList() {\n  useLoadDataSources();\n\n  const dataSources = useSelector((state) => getDataSources(state.dataSources));\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n  const hasFetched = useSelector(({ dataSources }: StoreState) => dataSources.hasFetched);\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  return (\n    <DataSourcesListView\n      dataSources={dataSources}\n      dataSourcesCount={dataSourcesCount}\n      isLoading={!hasFetched}\n      hasCreateRights={hasCreateRights}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  isLoading: boolean;\n  hasCreateRights: boolean;\n};\n\nexport function DataSourcesListView({ dataSources, dataSourcesCount, isLoading, hasCreateRights }: ViewProps) {\n  const styles = useStyles2(getStyles);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  if (dataSourcesCount === 0) {\n    return (\n      <EmptyListCTA\n        buttonDisabled={!hasCreateRights}\n        title=\"No data sources defined\"\n        buttonIcon=\"database\"\n        buttonLink={dataSourcesRoutes.New}\n        buttonTitle=\"Add data source\"\n        proTip=\"You can also define data sources through configuration files.\"\n        proTipLink=\"http://docs.grafana.org/administration/provisioning/#datasources?utm_source=grafana_ds_list\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {/* List Header */}\n      <DataSourcesListHeader />\n\n      {/* List */}\n      <ul className={styles.list}>\n        {dataSources.map((dataSource) => {\n          return (\n            <li key={dataSource.uid}>\n              <Card href={dataSourcesRoutes.Edit.replace(/:uid/gi, dataSource.uid)}>\n                <Card.Heading>{dataSource.name}</Card.Heading>\n                <Card.Figure>\n                  <img src={dataSource.typeLogoUrl} alt=\"\" height=\"40px\" width=\"40px\" className={styles.logo} />\n                </Card.Figure>\n                <Card.Meta>\n                  {[\n                    dataSource.typeName,\n                    dataSource.url,\n                    dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                  ]}\n                </Card.Meta>\n              </Card>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    list: css({\n      listStyle: 'none',\n      display: 'grid',\n      // gap: '8px', Add back when legacy support for old Card interface is dropped\n    }),\n    logo: css({\n      objectFit: 'contain',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\n\nexport function PluginsErrorsInfo() {\n  const errors = useGetErrors();\n  const { isLoading } = useFetchStatus();\n  const styles = useStyles2(getStyles);\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={styles.list}\n          renderItem={(error) => (\n            <div className={styles.wrapper}>\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{error.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                  className={styles.badge}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n      </div>\n    </InfoBox>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      listStyleType: 'circle',\n    }),\n    wrapper: css({\n      marginTop: theme.spacing(1),\n    }),\n    badge: css({\n      marginTop: 0,\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Card, LinkButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  dataSourcePlugin: DataSourcePluginMeta;\n  onClick: () => void;\n};\n\nexport function DataSourceTypeCard({ onClick, dataSourcePlugin }: Props) {\n  const isPhantom = dataSourcePlugin.module === 'phantom';\n  const isClickable = !isPhantom && !dataSourcePlugin.unlicensed;\n  const learnMoreLink = dataSourcePlugin.info?.links?.length > 0 ? dataSourcePlugin.info.links[0] : null;\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card className={cx(styles.card, 'card-parent')} onClick={isClickable ? onClick : () => {}}>\n      {/* Name */}\n      <Card.Heading\n        className={styles.heading}\n        aria-label={e2eSelectors.pages.AddDataSource.dataSourcePluginsV2(dataSourcePlugin.name)}\n      >\n        {dataSourcePlugin.name}\n      </Card.Heading>\n\n      {/* Logo */}\n      <Card.Figure align=\"center\" className={styles.figure}>\n        <img className={styles.logo} src={dataSourcePlugin.info.logos.small} alt=\"\" />\n      </Card.Figure>\n\n      <Card.Description className={styles.description}>{dataSourcePlugin.info.description}</Card.Description>\n\n      {/* Signature */}\n      {!isPhantom && (\n        <Card.Meta className={styles.meta}>\n          <PluginSignatureBadge status={dataSourcePlugin.signature} />\n        </Card.Meta>\n      )}\n\n      {/* Learn more */}\n      <Card.Actions className={styles.actions}>\n        {learnMoreLink && (\n          <LinkButton\n            aria-label={`${dataSourcePlugin.name}, learn more.`}\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            icon=\"external-link-alt\"\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener\"\n            target=\"_blank\"\n            variant=\"secondary\"\n          >\n            {learnMoreLink.name}\n          </LinkButton>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    heading: css({\n      fontSize: theme.v1.typography.heading.h5,\n      fontWeight: 'inherit',\n    }),\n    figure: css({\n      width: 'inherit',\n      marginRight: '0px',\n      '> img': {\n        width: theme.spacing(7),\n      },\n    }),\n    meta: css({\n      marginTop: '6px',\n      position: 'relative',\n    }),\n    description: css({\n      margin: '0px',\n      fontSize: theme.typography.size.sm,\n    }),\n    actions: css({\n      position: 'relative',\n      alignSelf: 'center',\n      marginTop: '0px',\n      opacity: 0,\n\n      '.card-parent:hover &, .card-parent:focus-within &': {\n        opacity: 1,\n      },\n    }),\n    card: css({\n      gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n    }),\n    logo: css({\n      marginRight: theme.v1.spacing.lg,\n      marginLeft: theme.v1.spacing.sm,\n      width: theme.spacing(7),\n      maxHeight: theme.spacing(7),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { List } from '@grafana/ui';\n\nimport { DataSourceTypeCard } from './DataSourceTypeCard';\n\nexport type Props = {\n  // The list of data-source plugins to display\n  dataSourcePlugins: DataSourcePluginMeta[];\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceTypeCardList({ dataSourcePlugins, onClickDataSourceType }: Props) {\n  if (!dataSourcePlugins || !dataSourcePlugins.length) {\n    return null;\n  }\n\n  return (\n    <List\n      items={dataSourcePlugins}\n      getItemKey={(item) => item.id.toString()}\n      renderItem={(item) => <DataSourceTypeCard dataSourcePlugin={item} onClick={() => onClickDataSourceType(item)} />}\n      className={css`\n        > li {\n          margin-bottom: 2px;\n        }\n      `}\n    />\n  );\n}\n","import React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\nimport { DataSourcePluginCategory } from 'app/types';\n\nimport { DataSourceTypeCardList } from './DataSourceTypeCardList';\n\nexport type Props = {\n  // The list of data-source plugin categories to display\n  categories: DataSourcePluginCategory[];\n\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceCategories({ categories, onClickDataSourceType }: Props) {\n  return (\n    <>\n      {/* Categories */}\n      {categories.map(({ id, title, plugins }) => (\n        <div className=\"add-data-source-category\" key={id}>\n          <div className=\"add-data-source-category__header\" id={id}>\n            {title}\n          </div>\n          <DataSourceTypeCardList dataSourcePlugins={plugins} onClickDataSourceType={onClickDataSourceType} />\n        </div>\n      ))}\n\n      {/* Find more */}\n      <div className=\"add-data-source-more\">\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Find more data source plugins on grafana.com\n        </LinkButton>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { AnyAction } from 'redux';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { PluginsErrorsInfo } from 'app/features/plugins/components/PluginsErrorsInfo';\nimport { DataSourcePluginCategory, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport { DataSourceCategories } from '../components/DataSourceCategories';\nimport { DataSourceTypeCardList } from '../components/DataSourceTypeCardList';\nimport {\n  useAddDatasource,\n  useLoadDataSourcePlugins,\n  getFilteredDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n  useDataSourcesRoutes,\n} from '../state';\n\nexport function NewDataSource() {\n  useLoadDataSourcePlugins();\n\n  const dispatch = useDispatch();\n  const filteredDataSources = useSelector((s: StoreState) => getFilteredDataSourcePlugins(s.dataSources));\n  const searchQuery = useSelector((s: StoreState) => s.dataSources.dataSourceTypeSearchQuery);\n  const isLoading = useSelector((s: StoreState) => s.dataSources.isLoadingDataSources);\n  const dataSourceCategories = useSelector((s: StoreState) => s.dataSources.categories);\n  const onAddDataSource = useAddDatasource();\n  const onSetSearchQuery = (q: string) => dispatch(setDataSourceTypeSearchQuery(q));\n\n  return (\n    <NewDataSourceView\n      dataSources={filteredDataSources}\n      dataSourceCategories={dataSourceCategories}\n      searchQuery={searchQuery}\n      isLoading={isLoading}\n      onAddDataSource={onAddDataSource}\n      onSetSearchQuery={onSetSearchQuery}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourcePluginMeta[];\n  dataSourceCategories: DataSourcePluginCategory[];\n  searchQuery: string;\n  isLoading: boolean;\n  onAddDataSource: (dataSource: DataSourcePluginMeta) => void;\n  onSetSearchQuery: (q: string) => AnyAction;\n};\n\nexport function NewDataSourceView({\n  dataSources,\n  dataSourceCategories,\n  searchQuery,\n  isLoading,\n  onAddDataSource,\n  onSetSearchQuery,\n}: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <>\n      {/* Search */}\n      <div className=\"page-action-bar\">\n        <FilterInput value={searchQuery} onChange={onSetSearchQuery} placeholder=\"Filter by name or type\" />\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton href={dataSourcesRoutes.List} fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n          Cancel\n        </LinkButton>\n      </div>\n\n      {/* Show any plugin errors while not searching for anything specific */}\n      {!searchQuery && <PluginsErrorsInfo />}\n\n      {/* Search results */}\n      <div>\n        {searchQuery && (\n          <DataSourceTypeCardList dataSourcePlugins={dataSources} onClickDataSourceType={onAddDataSource} />\n        )}\n        {!searchQuery && (\n          <DataSourceCategories categories={dataSourceCategories} onClickDataSourceType={onAddDataSource} />\n        )}\n      </div>\n    </>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginErrorCode, unEscapeStringFromRegex } from '@grafana/data';\n\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(unEscapeStringFromRegex(searchBy).toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectPluginErrors = createSelector(selectAll, (plugins) =>\n  plugins\n    ? plugins\n        .filter((p) => Boolean(p.error))\n        .map(\n          (p): PluginError => ({\n            pluginId: p.id,\n            errorCode: p!.error as PluginErrorCode,\n          })\n        )\n    : []\n);\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect } from 'react';\n\nimport { PluginError } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters } from '../helpers';\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall } from './actions';\nimport { setDisplayMode } from './reducer';\nimport {\n  find,\n  selectAll,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n  selectPluginErrors,\n} from './selectors';\n\ntype Filters = {\n  query?: string; // Note: this will be an escaped regex string as it comes from `FilterInput`\n  filterBy?: string;\n  filterByType?: string;\n  sortBy?: Sorters;\n};\n\nexport const useGetAllWithFilters = ({\n  query = '',\n  filterBy = 'installed',\n  filterByType = 'all',\n  sortBy = Sorters.nameAsc,\n}: Filters) => {\n  useFetchAll();\n\n  const filtered = useSelector(find(query, filterBy, filterByType));\n  const { isLoading, error } = useFetchStatus();\n  const sortedAndFiltered = sortPlugins(filtered, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedAndFiltered,\n  };\n};\n\nexport const useGetAll = (): CatalogPlugin[] => {\n  useFetchAll();\n\n  return useSelector(selectAll);\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors);\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n"],"names":["PageActionBar","PureComponent","render","searchQuery","linkButton","setSearchQuery","target","placeholder","this","props","linkProps","href","disabled","className","value","onChange","title","getStyles","theme","sourcesList","css","card","cardContent","logoWrapper","label","colors","text","primary","CardGrid","items","styles","useStyles2","map","item","Card","url","logo","src","alt","name","id","categoryHeader","categoryLabel","CategoryHeader","iconName","Icon","size","noResults","NoResults","searchContainer","Search","Input","I","prefix","spacer","ConnectData","searchTerm","setSearchTerm","useState","isLoading","error","plugins","useGetAllWithFilters","query","filterBy","cardGridItems","useMemo","plugin","info","logos","small","ROUTES","showNoResults","length","e","currentTarget","toLowerCase","LoadingPlaceholder","message","ConnectDataPage","Page","navId","DataSourceDetailsPage","overrideNavId","navIndex","useSelector","state","Boolean","pageNav","subTitle","active","DataSourcesListPage","DataSourcesList","EditDataSourcePage","uid","useParams","location","useLocation","datasource","useDataSource","datasourcePlugin","useGetSingle","type","pageId","URLSearchParams","search","get","EditDataSource","NewDataSourcePage","NewDataSource","Connections","isConnectDataPageOverriden","New","List","Edit","Dashboards","exact","path","component","DataSourcesListHeader","dispatch","useDispatch","useCallback","q","setDataSourcesSearchQuery","dataSources","getDataSourcesSearchQuery","canCreateDataSource","contextSrv","AccessControlAction","DataSourcesListHeaderView","useDataSourcesRoutes","useLoadDataSources","getDataSources","dataSourcesCount","getDataSourcesCount","hasFetched","hasCreateRights","DataSourcesListView","dataSourcesRoutes","PageLoader","EmptyListCTA","buttonDisabled","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","list","dataSource","replace","typeLogoUrl","height","width","typeName","isDefault","Tag","colorIndex","listStyle","display","objectFit","PluginsErrorsInfo","errors","useGetErrors","useFetchStatus","InfoBox","selectors","severity","urlTitle","renderItem","wrapper","spacing","justify","align","pluginId","PluginSignatureBadge","status","mapPluginErrorCodeToSignatureStatus","errorCode","badge","code","PluginErrorCode","PluginSignatureStatus","listStyleType","marginTop","DataSourceTypeCard","onClick","dataSourcePlugin","isPhantom","module","isClickable","unlicensed","learnMoreLink","links","cx","heading","e2eSelectors","figure","description","meta","signature","actions","icon","stopPropagation","rel","variant","fontSize","v1","typography","h5","fontWeight","marginRight","position","margin","sm","alignSelf","opacity","gridTemplateAreas","lg","marginLeft","maxHeight","DataSourceTypeCardList","dataSourcePlugins","onClickDataSourceType","getItemKey","toString","DataSourceCategories","categories","useLoadDataSourcePlugins","filteredDataSources","s","getFilteredDataSourcePlugins","dataSourceTypeSearchQuery","isLoadingDataSources","dataSourceCategories","onAddDataSource","useAddDatasource","NewDataSourceView","onSetSearchQuery","setDataSourceTypeSearchQuery","FilterInput","fill","selectRoot","selectItems","createSelector","selectDisplayMode","settings","displayMode","selectAll","selectById","pluginsAdapter","findByInstallAndType","filterByType","filter","isInstalled","isCore","selectInstalled","find","searchBy","fields","push","orgName","some","f","includes","unEscapeStringFromRegex","findByKeyword","filteredPlugins","searchedPlugins","selectPluginErrors","p","selectRequest","actionType","requests","selectIsRequestPending","request","RequestStatus","selectRequestError","sortBy","Sorters","useFetchAll","filtered","sortPlugins","useFetchDetails","useInstall","version","isUpdating","install","useUninstall","uninstall","useIsRemotePluginsAvailable","fetchRemotePlugins","fetchAll","useFetchDetailsStatus","fetchDetails","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","undefined","useEffect","shouldFetch","details","useDisplayMode","setDisplayMode","v"],"sourceRoot":""}